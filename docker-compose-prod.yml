version: '3.9'
services:

  manager_api:
    container_name: man_api
    build:
      context: .
      dockerfile: ./manager/Dockerfile
    restart: always
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - AWS_KEY_ID=${AWS_KEY_ID}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
    volumes:
      - static-data-manager:/vol/web
    ports:
      - "8000:8000"

  db:
    container_name: man_db
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - 5432:5432
    volumes:
      - postgres-data-manager:/var/lib/postgresql/data

  pgAdmin:
      image: dpage/pgadmin4
      container_name: manager_pgadmin
      restart: always
      depends_on:
        - db
      ports:
        - 8080:80
      environment:
        - PGADMIN_DEFAULT_EMAIL=devuser@email.com
        - PGADMIN_DEFAULT_PASSWORD=changeme
      volumes:
        - ./pgadmin:/var/lib/pgadmin
        - ./pgadmin:/certs/server.cert
        - ./pgadmin:/certs/server.key
        - ./pgadmin:/pgadmin4/servers.json

  proxy:
    container_name: man_proxy
    build:
      context: ./proxy
    restart: always
    depends_on:
      - manager_api
    ports:
      - 8004:8000
    volumes:
      - static-data-manager:/vol/static


volumes:
  static-data-manager:
  postgres-data-manager: